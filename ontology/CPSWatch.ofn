Prefix(:=<https://w3id.org/CPSWatch#>)
Prefix(dc:=<http://purl.org/dc/elements/1.1/>)
Prefix(org:=<http://www.w3.org/ns/org#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(bibo:=<http://purl.org/ontology/bibo/>)
Prefix(foaf:=<http://xmlns.com/foaf/0.1/>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)
Prefix(vann:=<http://purl.org/vocab/vann/>)
Prefix(skos1:=<http://www.w3.org/2008/05/skos#>)
Prefix(terms:=<http://purl.org/dc/terms/>)
Prefix(schema:=<https://schema.org/>)


Ontology(<https://w3id.org/CPSWatch>
<https://w3id.org/CPSWatch/1.0.1>
Annotation(dc:description "This ontology defines a vocabulary for describing cyber physical systems for monitoring purpose. It contains two main concepts: CPSWatch#MonitoredSystem that is a top level description of a System that is modeled and CPSWatch#MonitoringSensor that is a top level description of a sensor used to monitor the CPSWatch#MonitoredSystem. "@en)
Annotation(dc:title "The Cyber Physical System Watch Ontology"@en)
Annotation(terms:abstract "Manufacturers and users want to monitore their cyber physical systems. In the Industry 4.0 this is done by observing data from sensors. The problem arises when looking at a system of systems, e.g. a production plant or a whole powertrain of a vessel. Multiple systems describe their data in multiple ways and create the problem of analysing these data together in one system. To tackle this problem and to make transferability of algorithms (ML methods) between different monitoring systems possible, the CPSWatch Ontology is defined to create a top level description of a CPS system. "@en)
Annotation(terms:created "December 7th, 2023"@en)
Annotation(terms:creator <https://orcid.org/0009-0003-2548-8225>)
Annotation(terms:issued "December 7th, 2023"@en)
Annotation(terms:license <https://creativecommons.org/licenses/by/4.0/>)
Annotation(terms:modified "December 7th, 2023"@en)
Annotation(terms:publisher "CPSWatch on Github"@en)
Annotation(bibo:status "CPSWatch (stable)"@en)
Annotation(vann:preferredNamespacePrefix "CPSWatch"@en)
Annotation(vann:preferredNamespaceUri "https://w3id.org/CPSWatch/1.0.1")
Annotation(rdfs:comment "1.0.1 release of the CPSWatch Ontology"@en)
Annotation(owl:versionInfo "1.0.1"@en)
Annotation(schema:image <https://github.com/B-Ludwig/CPSWatch/blob/aa184a2003274995672a6dd3ca445b12a5286f52/assets/Logo.png>)
Annotation(schema:logo <https://github.com/B-Ludwig/CPSWatch/blob/aa184a2003274995672a6dd3ca445b12a5286f52/assets/Logo.png>)

Declaration(Class(<http://qudt.org/schema/qudt/Unit>))
Declaration(Class(<http://www.w3.org/ns/sosa/ObservableProperty>))
Declaration(Class(foaf:Organization))
Declaration(Class(:ContinuousMonitoringSensor))
Declaration(Class(:EventMonitoringSensor))
Declaration(Class(:MonitoredSystem))
Declaration(Class(:MonitoringSensor))
Declaration(Class(:NumericMonitoringSensor))
Declaration(Class(:NumericObservation))
Declaration(Class(:Observation))
Declaration(Class(:Status))
Declaration(Class(:StatusMonitoringSensor))
Declaration(Class(:StatusObservation))
Declaration(ObjectProperty(dc:publisher))
Declaration(ObjectProperty(<http://www.w3.org/ns/sosa/madeBySensor>))
Declaration(ObjectProperty(<http://www.w3.org/ns/sosa/observes>))
Declaration(ObjectProperty(:hasInfluence))
Declaration(ObjectProperty(:hasMonitoringSensor))
Declaration(ObjectProperty(:hasNegativeCorrelation))
Declaration(ObjectProperty(:hasPositiveCorrelation))
Declaration(ObjectProperty(:hasStates))
Declaration(ObjectProperty(:hasStatus))
Declaration(ObjectProperty(:hasSubSystem))
Declaration(ObjectProperty(:hasSystemConnection))
Declaration(ObjectProperty(:hasUnit))
Declaration(DataProperty(<http://www.w3.org/ns/sosa/hasSimpleResult>))
Declaration(DataProperty(<http://www.w3.org/ns/sosa/resultTime>))
Declaration(DataProperty(:hasDeviationThreshold))
Declaration(DataProperty(:hasSampleRate))
Declaration(DataProperty(:hasSensorID))
Declaration(DataProperty(:hasSystemID))
Declaration(NamedIndividual(:Closed))
Declaration(NamedIndividual(:Critical))
Declaration(NamedIndividual(:Error))
Declaration(NamedIndividual(:Off))
Declaration(NamedIndividual(:Ok))
Declaration(NamedIndividual(:On))
Declaration(NamedIndividual(:Open))
Declaration(NamedIndividual(:ShuttingDown))
Declaration(NamedIndividual(:Starting))
Declaration(NamedIndividual(<https://www.hsu-hh.de#this>))
Declaration(AnnotationProperty(dc:description))
Declaration(AnnotationProperty(dc:title))
Declaration(AnnotationProperty(terms:abstract))
Declaration(AnnotationProperty(terms:created))
Declaration(AnnotationProperty(terms:creator))
Declaration(AnnotationProperty(terms:description))
Declaration(AnnotationProperty(terms:issued))
Declaration(AnnotationProperty(terms:license))
Declaration(AnnotationProperty(terms:modified))
Declaration(AnnotationProperty(terms:publisher))
Declaration(AnnotationProperty(bibo:status))
Declaration(AnnotationProperty(vann:preferredNamespacePrefix))
Declaration(AnnotationProperty(vann:preferredNamespaceUri))
Declaration(AnnotationProperty(owl:cardinality))
Declaration(AnnotationProperty(skos1:prefLabel))
Declaration(AnnotationProperty(org:memberOf))
Declaration(AnnotationProperty(foaf:homepage))
Declaration(AnnotationProperty(foaf:name))
Declaration(AnnotationProperty(schema:image))
Declaration(AnnotationProperty(schema:includedInDataCatalog))
Declaration(AnnotationProperty(schema:logo))
############################
#   Annotation Properties
############################

# Annotation Property: skos1:prefLabel (skos1:prefLabel)

SubAnnotationPropertyOf(skos1:prefLabel rdfs:label)


############################
#   Object Properties
############################

# Object Property: dc:publisher (publisher)

AnnotationAssertion(rdfs:comment dc:publisher "An entity responsible for making the resource available."@en)
AnnotationAssertion(rdfs:isDefinedBy dc:publisher <http://purl.org/dc/elements/1.1/>)
AnnotationAssertion(rdfs:label dc:publisher "publisher"@en)

# Object Property: <http://www.w3.org/ns/sosa/madeBySensor> (madeBySensor)

AnnotationAssertion(rdfs:comment <http://www.w3.org/ns/sosa/madeBySensor> "Connection between a CPSWatch#Observation and a CPSWatch#MonitoringSensor. "@en)
AnnotationAssertion(rdfs:label <http://www.w3.org/ns/sosa/madeBySensor> "madeBySensor"@en)
ObjectPropertyDomain(<http://www.w3.org/ns/sosa/madeBySensor> :Observation)
ObjectPropertyRange(<http://www.w3.org/ns/sosa/madeBySensor> :MonitoringSensor)

# Object Property: <http://www.w3.org/ns/sosa/observes> (observes)

AnnotationAssertion(rdfs:comment <http://www.w3.org/ns/sosa/observes> "Connection between a CPSWatch#MonitoringSensor and a sosa#ObservableProperty. "@en)
AnnotationAssertion(rdfs:label <http://www.w3.org/ns/sosa/observes> "observes"@en)
ObjectPropertyDomain(<http://www.w3.org/ns/sosa/observes> :MonitoringSensor)
ObjectPropertyRange(<http://www.w3.org/ns/sosa/observes> <http://www.w3.org/ns/sosa/ObservableProperty>)

# Object Property: :hasInfluence (hasInfluence)

AnnotationAssertion(rdfs:comment :hasInfluence "Connection between two CPSWatch:MonitoringSensor to state that the observations of these sensors are connected."@en)
AnnotationAssertion(rdfs:label :hasInfluence "hasInfluence"@en)
ObjectPropertyDomain(:hasInfluence :MonitoringSensor)
ObjectPropertyRange(:hasInfluence :MonitoringSensor)

# Object Property: :hasMonitoringSensor (hasMonitoringSensor)

AnnotationAssertion(rdfs:comment :hasMonitoringSensor "Connection from a CPSWatch:MonitoredSystem to a CPSWatch#MonitoringSensor"@en)
AnnotationAssertion(rdfs:label :hasMonitoringSensor "hasMonitoringSensor"@en)
ObjectPropertyDomain(:hasMonitoringSensor :MonitoredSystem)
ObjectPropertyRange(:hasMonitoringSensor :MonitoringSensor)

# Object Property: :hasNegativeCorrelation (hasNegativeCorrelation)

AnnotationAssertion(rdfs:comment :hasNegativeCorrelation "Connection between two CPSWatch:MonitoringSensor to state that the observations of these sensors are with a negative correlation."@en)
AnnotationAssertion(rdfs:label :hasNegativeCorrelation "hasNegativeCorrelation"@en)
SubObjectPropertyOf(:hasNegativeCorrelation :hasInfluence)
ObjectPropertyDomain(:hasNegativeCorrelation :MonitoringSensor)
ObjectPropertyRange(:hasNegativeCorrelation :MonitoringSensor)

# Object Property: :hasPositiveCorrelation (hasPositiveCorrelation)

AnnotationAssertion(rdfs:comment :hasPositiveCorrelation "Connection between two CPSWatch:MonitoringSensor to state that the observations of these sensors are with a positive correlation."@en)
AnnotationAssertion(rdfs:label :hasPositiveCorrelation "hasPositiveCorrelation"@en)
SubObjectPropertyOf(:hasPositiveCorrelation :hasInfluence)
ObjectPropertyDomain(:hasPositiveCorrelation :MonitoringSensor)
ObjectPropertyRange(:hasPositiveCorrelation :MonitoringSensor)

# Object Property: :hasStates (hasStates)

AnnotationAssertion(rdfs:comment :hasStates "The possible states that a CPSWatch#StatusMonitoringSensor can have.")
AnnotationAssertion(rdfs:label :hasStates "hasStates")
ObjectPropertyDomain(:hasStates :StatusMonitoringSensor)
ObjectPropertyRange(:hasStates :Status)

# Object Property: :hasStatus (hasStatus)

AnnotationAssertion(rdfs:comment :hasStatus "The Status of the observations of a CPSWatch#StatusMonitoringSensor.")
AnnotationAssertion(rdfs:label :hasStatus "hasStatus")
AnnotationAssertion(owl:cardinality :hasStatus "1"^^xsd:nonNegativeInteger)
ObjectPropertyDomain(:hasStatus :StatusObservation)
ObjectPropertyRange(:hasStatus :Status)

# Object Property: :hasSubSystem (hasSubSystem)

AnnotationAssertion(rdfs:comment :hasSubSystem "Connection between two CPSWatch:MonitoredSystem to state that a CPSWatch:MonitoredSystem has a sub system."@en)
AnnotationAssertion(rdfs:label :hasSubSystem "hasSubSystem"@en)
ObjectPropertyDomain(:hasSubSystem :MonitoredSystem)
ObjectPropertyRange(:hasSubSystem :MonitoredSystem)

# Object Property: :hasSystemConnection (hasSystemConnection)

AnnotationAssertion(rdfs:comment :hasSystemConnection "Connection between two CPSWatch:MonitoredSystem to state that system B is dependent on system A, e.g. CPSWatch:MonitoredSystem A hasSystemConnection CPSWatch:MonitoredSystem B."@en)
AnnotationAssertion(rdfs:label :hasSystemConnection "hasSystemConnection"@en)
SubObjectPropertyOf(:hasSystemConnection :hasSystemConnection)
ObjectPropertyDomain(:hasSystemConnection :MonitoredSystem)
ObjectPropertyRange(:hasSystemConnection :MonitoredSystem)

# Object Property: :hasUnit (hasUnit)

AnnotationAssertion(rdfs:comment :hasUnit "The unit the observations of a CPSWatch#ContinuousMonitoringSensor or CPSWatch#EventMonitoringSensor monitoring sensor are made in.")
AnnotationAssertion(rdfs:label :hasUnit "hasUnit")
AnnotationAssertion(owl:cardinality :hasUnit "1"^^xsd:nonNegativeInteger)
ObjectPropertyDomain(:hasUnit :NumericMonitoringSensor)
ObjectPropertyRange(:hasUnit <http://qudt.org/schema/qudt/Unit>)


############################
#   Data Properties
############################

# Data Property: <http://www.w3.org/ns/sosa/hasSimpleResult> (hasSimpleResult)

AnnotationAssertion(rdfs:comment <http://www.w3.org/ns/sosa/hasSimpleResult> "The value of the observations of a CPSWatch#ContinuousMonitoringSensor or CPSWatch#EventMonitoringSensor monitoring sensor are made in.")
AnnotationAssertion(rdfs:label <http://www.w3.org/ns/sosa/hasSimpleResult> "hasSimpleResult")
AnnotationAssertion(owl:cardinality <http://www.w3.org/ns/sosa/hasSimpleResult> "1"^^xsd:nonNegativeInteger)
DataPropertyDomain(<http://www.w3.org/ns/sosa/hasSimpleResult> :NumericObservation)

# Data Property: <http://www.w3.org/ns/sosa/resultTime> (resultTime)

AnnotationAssertion(rdfs:comment <http://www.w3.org/ns/sosa/resultTime> "The dateTime of the observations of a CPSWatch#ContinuousMonitoringSensor or CPSWatch#EventMonitoringSensor monitoring sensor.")
AnnotationAssertion(rdfs:label <http://www.w3.org/ns/sosa/resultTime> "resultTime")
AnnotationAssertion(owl:cardinality <http://www.w3.org/ns/sosa/resultTime> "1"^^xsd:nonNegativeInteger)
DataPropertyDomain(<http://www.w3.org/ns/sosa/resultTime> :Observation)

# Data Property: :hasDeviationThreshold (hasDeviationThreshold)

AnnotationAssertion(rdfs:comment :hasDeviationThreshold "Deviation threshold of a CPSWatch:EventMonitoringSensor that needs to be exceeded to save the current value.")
AnnotationAssertion(rdfs:label :hasDeviationThreshold "hasDeviationThreshold")
AnnotationAssertion(owl:cardinality :hasDeviationThreshold "1"^^xsd:nonNegativeInteger)
DataPropertyDomain(:hasDeviationThreshold :EventMonitoringSensor)
DataPropertyRange(:hasDeviationThreshold xsd:float)

# Data Property: :hasSampleRate (hasSampleRate)

AnnotationAssertion(rdfs:comment :hasSampleRate "Update rate in seconds (s) that the data is stored.")
AnnotationAssertion(rdfs:label :hasSampleRate "hasSampleRate")
AnnotationAssertion(owl:cardinality :hasSampleRate "1"^^xsd:nonNegativeInteger)
DataPropertyDomain(:hasSampleRate :ContinuousMonitoringSensor)
DataPropertyRange(:hasSampleRate xsd:float)

# Data Property: :hasSensorID (hasID)

AnnotationAssertion(rdfs:comment :hasSensorID "The unique ID of a CPSWatch#MonitoringSensor."@en)
AnnotationAssertion(rdfs:label :hasSensorID "hasID"@en)
DataPropertyDomain(:hasSensorID :MonitoringSensor)
DataPropertyRange(:hasSensorID xsd:unsignedInt)

# Data Property: :hasSystemID (hasID)

AnnotationAssertion(rdfs:comment :hasSystemID "The unique ID of a CPSWatch#MonitoredSystem."@en)
AnnotationAssertion(rdfs:label :hasSystemID "hasID"@en)
DataPropertyDomain(:hasSystemID :MonitoredSystem)
DataPropertyRange(:hasSystemID xsd:unsignedInt)



############################
#   Classes
############################

# Class: <http://qudt.org/schema/qudt/Unit> (Unit)

AnnotationAssertion(rdfs:comment <http://qudt.org/schema/qudt/Unit> "A unit of measure, or unit, is a particular quantity value that has been chosen as a scale for measuring other quantities the same kind (more generally of equivalent dimension). For example, the meter is a quantity of length that has been rigorously defined and standardized by the BIPM (International Board of Weights and Measures). Any measurement of the length can be expressed as a number multiplied by the unit meter. More formally, the value of a physical quantity Q with respect to a unit (U) is expressed as the scalar multiple of a real number (n) and U, as  \\\\\\\\(Q = nU\\\\\\\\). ")
AnnotationAssertion(rdfs:label <http://qudt.org/schema/qudt/Unit> "Unit")

# Class: :ContinuousMonitoringSensor (ContinuousMonitoringSensor)

AnnotationAssertion(rdfs:comment :ContinuousMonitoringSensor "A CPSWatch#ContinuousMonitoringSensor is a sensor that writes data with a fixed sample rate.")
AnnotationAssertion(rdfs:label :ContinuousMonitoringSensor "ContinuousMonitoringSensor")
SubClassOf(:ContinuousMonitoringSensor :NumericMonitoringSensor)
SubClassOf(:ContinuousMonitoringSensor DataExactCardinality(1 :hasSampleRate))

# Class: :EventMonitoringSensor (EventMonitoringSensor)

AnnotationAssertion(rdfs:comment :EventMonitoringSensor "A CPSWatch#EventMonitoringSensor is a sensor that writes data if a threshold is surpassed.")
AnnotationAssertion(rdfs:label :EventMonitoringSensor "EventMonitoringSensor")
SubClassOf(:EventMonitoringSensor :NumericMonitoringSensor)
SubClassOf(:EventMonitoringSensor DataExactCardinality(1 :hasDeviationThreshold))

# Class: :MonitoredSystem (MonitoredSystem)

AnnotationAssertion(rdfs:comment :MonitoredSystem "A CPSWatch#MonitoredSystem is a system that is monitored by CPSWatch#MonitoringSensor.")
AnnotationAssertion(rdfs:label :MonitoredSystem "MonitoredSystem")
SubClassOf(:MonitoredSystem DataExactCardinality(1 :hasSystemID))

# Class: :MonitoringSensor (MonitoringSensor)

AnnotationAssertion(rdfs:comment :MonitoringSensor "A CPSWatch#MonitoringSensor is a sensor used to monitor a CPSWatch#MonitoredSystem. It can be of type CPSWatch#ContinuousMonitoringSensor, CPSWatch#EventMonitoringSensor, CPSWatch#StatusMonitoringSensor.")
AnnotationAssertion(rdfs:label :MonitoringSensor "MonitoringSensor")
SubClassOf(:MonitoringSensor DataExactCardinality(1 :hasSensorID))

# Class: :NumericMonitoringSensor (NumericMonitoringSensor)

AnnotationAssertion(rdfs:comment :NumericMonitoringSensor "A CPSWatch#NumericMonitoringSensor is a sensor that writes numreric data.")
AnnotationAssertion(rdfs:label :NumericMonitoringSensor "NumericMonitoringSensor")
SubClassOf(:NumericMonitoringSensor :MonitoringSensor)

# Class: :NumericObservation (NumericObservation )

AnnotationAssertion(rdfs:comment :NumericObservation "A CPSWatch#NumericObservation is an observation made by an CPSWatch#NumericMonitoringSensor.")
AnnotationAssertion(rdfs:label :NumericObservation "NumericObservation ")
SubClassOf(:NumericObservation :Observation)
SubClassOf(:NumericObservation DataExactCardinality(1 <http://www.w3.org/ns/sosa/hasSimpleResult>))

# Class: :Observation (Observation)

AnnotationAssertion(rdfs:comment :Observation "A CPSWatch#Observation is the parent class of CPSWatch#NumericObservation and CPSWatch#StatusObservation that describe the observation made by a CPSWatch#ContinuousMonitoringSensor, CPSWatch#EventMonitoringSensor, or CPSWatch#StatusMonitoringSensor.")
AnnotationAssertion(rdfs:label :Observation "Observation")
SubClassOf(:Observation ObjectExactCardinality(1 <http://www.w3.org/ns/sosa/madeBySensor> :MonitoringSensor))
SubClassOf(:Observation DataExactCardinality(1 <http://www.w3.org/ns/sosa/resultTime>))

# Class: :Status (Status)

AnnotationAssertion(rdfs:comment :Status "The status values a CPSWatch#StatusMonitoringSensor can return.")
AnnotationAssertion(rdfs:label :Status "Status")

# Class: :StatusMonitoringSensor (StatusMonitoringSensor)

AnnotationAssertion(rdfs:comment :StatusMonitoringSensor "A CPSWatch#StatusMonitoringSensor is a sensor that can write specific states.")
AnnotationAssertion(rdfs:label :StatusMonitoringSensor "StatusMonitoringSensor")
SubClassOf(:StatusMonitoringSensor :MonitoringSensor)

# Class: :StatusObservation (StatusObservation )

AnnotationAssertion(rdfs:comment :StatusObservation "A CPSWatch#StatusObservation is an observation made by an CPSWatch#StatusMonitoringSensor monitoring sensor.")
AnnotationAssertion(rdfs:label :StatusObservation "StatusObservation ")
SubClassOf(:StatusObservation :Observation)
SubClassOf(:StatusObservation ObjectExactCardinality(1 :hasStatus :Status))


############################
#   Named Individuals
############################

# Individual: :Closed (:Closed)

ClassAssertion(:Status :Closed)

# Individual: :Critical (:Critical)

ClassAssertion(:Status :Critical)

# Individual: :Error (:Error)

ClassAssertion(:Status :Error)

# Individual: :Off (:Off)

ClassAssertion(:Status :Off)

# Individual: :Ok (:Ok)

ClassAssertion(:Status :Ok)

# Individual: :On (:On)

ClassAssertion(:Status :On)

# Individual: :Open (:Open)

ClassAssertion(:Status :Open)

# Individual: :ShuttingDown (:ShuttingDown)

ClassAssertion(:Status :ShuttingDown)

# Individual: :Starting (:Starting)

ClassAssertion(:Status :Starting)

# Individual: <https://www.hsu-hh.de#this> (<https://www.hsu-hh.de#this>)

AnnotationAssertion(foaf:homepage <https://www.hsu-hh.de#this> "https://www.hsu-hh.de/en/")
AnnotationAssertion(foaf:name <https://www.hsu-hh.de#this> "Helmut Schmidt University")
ClassAssertion(foaf:Organization <https://www.hsu-hh.de#this>)


AnnotationAssertion(org:memberOf <https://orcid.org/0009-0003-2548-8225> <https://www.hsu-hh.de#this>)
AnnotationAssertion(foaf:name <https://orcid.org/0009-0003-2548-8225> "Björn Ludwig"@en)
)